
// CreateThreadDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "CreateThread.h"
#include "CreateThreadDlg.h"
#include "afxdialogex.h"

#include "TestDlg.h"
#include "UIThreadApp.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif



// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CCreateThreadDlg 对话框




CCreateThreadDlg::CCreateThreadDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CCreateThreadDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CCreateThreadDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CCreateThreadDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON1, &CCreateThreadDlg::OnBnClickedButton1)
END_MESSAGE_MAP()


// CCreateThreadDlg 消息处理程序

BOOL CCreateThreadDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CCreateThreadDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CCreateThreadDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CCreateThreadDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

DWORD WINAPI ThreadProc(LPVOID lpParameter)// 第一种

{
	int tipMsg = (int)lpParameter;
	CString strMsg;
	while(true)
	{
		OutputDebugString(strMsg);
		strMsg.Format(_T("%d\n"),tipMsg++);
		Sleep(1000);
	//AfxMessageBox(strMsg);
	}
	return 0;
}
UINT __cdecl MyControllingFunction( LPVOID lpParameter )// 线程函数调用类变量,
{
	CCreateThreadDlg *pThisDlg = (CCreateThreadDlg*)lpParameter;// 获取类指针
	int tipMsg = pThisDlg->m_Num;// 获取类成员变量
	CString strMsg;
	while(true)
	{
		OutputDebugString(strMsg);
		strMsg.Format(_T("%d\n"),tipMsg++);
		Sleep(1000);
	//AfxMessageBox(strMsg);
	}
	return 0;
}

UINT __cdecl MyThreadPorc( LPVOID lpParameter )
{
	CCreateThreadDlg *pThisDlg = (CCreateThreadDlg*)lpParameter;// 获取类指针

	//CTestDlg dlg;
	//dlg.DoModal();// 弹出对话框
	CTestDlg * pTestDlg = new CTestDlg;
	pTestDlg->Create(IDD_DIALOG1,NULL);
	pTestDlg->ShowWindow(SW_SHOW);

	MSG msg = {0};
	while(GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	//Sleep(5000);
	return 0;
}

void CCreateThreadDlg::OnBnClickedButton1()
{
	// TODO: 在此添加控件通知处理程序代码
	m_Num = 100;
	/*/ 第一种
	DWORD dwThreadID = 0;
	HANDLE hThread = CreateThread(NULL, 0, ThreadProc, (LPVOID)123, 0, &dwThreadID); 
	CloseHandle(hThread);
	*/
	// 第二种
	//CWinThread* pThread = AfxBeginThread(MyThreadPorc, this);// this, 传递类指针，方法二：声明成静态成员函数，但还是需要传递this指针
	// 自动释放，不用写代码


	AfxBeginThread(RUNTIME_CLASS(CUIThreadApp));

}
